# -*- coding: utf-8 -*-
"""Linkedlist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18UMeKinGgn6FLWuoR0lk1wzxP130t_nW
"""

class Node:
  def __init__(self,value):
    self.value= value
    self.next= None

#my linkedlist class
class LinkedList:
  def __init__(self):
    self.head= None
    self.tail= None
    self.size= 0


  def print_list(self):
    temp= self.head
    if temp is None:
      return "Linked List is empty "
    else:
      while temp is not None :
        print(temp.value, end="--->")
        temp= temp.next


  def prepend(self,value):
    new_node= Node(value)
    temp= self.head
    if temp is None:
      self.head = new_node
      self.tail= new_node
    else:
      self.head= new_node
      new_node.next= temp
    self.size+=1


  def append(self,value):
    new_node= Node(value)
    if self.head is None:
      self.head = new_node
      self.tail= new_node
    else:
      self.tail.next= new_node
      self.tail= new_node
    self.size+=1

  def pop_first(self):
    temp= self.head
    if temp is None:
      return None
    else:
      value= temp.value
      self.head= temp.next
      temp.next= None
      self.size-= 1
      return value


  def pop_last(self):
    temp= self.head
    if temp is None:
      return "None"
    else:
      while temp.next != self.tail:
       temp= temp.next
      temp.next= None
      value=self.tail.value
      self.tail= temp
      self.size-=1
      return value

  def set_value(self,index,value):
    temp= self.head
    if temp is None:
      return "None"
    elif index < 0 or index > self.size:
      return "None"
    else:
      for _ in range(index):
        temp = temp.next
      temp.value= value
      return temp.value==value


  def get_value(self,index):
    temp= self.head
    if temp is None:
      return "None"
    elif index < 0 or index > self.size:
      return "None"
    else:
      for _ in range(index):
        temp = temp.next
      return temp.value


  def insert(self,index, value):
    temp = self.head
    prev= None
    new_node= Node(value)
    if temp is None and index==0:
      self.prepend(value)
      return True
    elif index < 0 or index > self.size:
      return "None"
    else:
      for _ in range(index):
        prev= temp
        temp = temp.next
      prev.next= new_node
      new_node.next= temp
      self.size+=1


  def remove(self,index):
    temp= self.head
    prev= None
    if temp is None:
      return None
    elif index < 0 or index > self.size:
      return None
    elif index== 0:
      self.pop_first()
    elif index== self.size:
        self.pop_last()
    else:
      for _ in range(index):
        prev= temp
        temp= temp.next
      prev.next= temp.next
      temp.next = None
      self.size-=1
      return True


  def reverse(self):
    temp=self.head
    if temp is None:
      return None
    prev= None
    while temp.next != None :
      forward= temp.next
      temp.next= prev
      prev= temp
      temp= forward
    self.tail= self.head
    self.head= prev




















ll= LinkedList()